{"remainingRequest":"/Users/washington.silva/totvs/projetos-psl/tfs-portal/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/washington.silva/totvs/projetos-psl/tfs-portal/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/washington.silva/totvs/projetos-psl/tfs-portal/node_modules/source-map-loader/index.js!/Users/washington.silva/totvs/projetos-psl/tfs-portal/src/docs/documentation/challenge.mdx","dependencies":[{"path":"/Users/washington.silva/totvs/projetos-psl/tfs-portal/src/docs/documentation/challenge.mdx","mtime":1564419152631},{"path":"/Users/washington.silva/totvs/projetos-psl/tfs-portal/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js","mtime":1564274188123},{"path":"/Users/washington.silva/totvs/projetos-psl/tfs-portal/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1564159894156},{"path":"/Users/washington.silva/totvs/projetos-psl/tfs-portal/node_modules/@mdx-js/loader/index.js","mtime":1564274188314},{"path":"/Users/washington.silva/totvs/projetos-psl/tfs-portal/node_modules/source-map-loader/index.js","mtime":1549647630591}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/washington.silva/totvs/projetos-psl/tfs-portal/src/docs/documentation/challenge.mdx"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"desafio\"\n    }}>{`Desafio`}</h1>\n    <p>{`A TOTVS quer lançar um aplicativo de questionários. Foi feita uma planning com o time o qual você é integrante e a sprint começou. Suas tarefas são as seguintes:`}</p>\n    <h2 {...{\n      \"id\": \"construir-a-página-do-administrador\"\n    }}>{`Construir a Página do administrador.`}</h2>\n    <p>{`O usuário deve acessar a página e ter duas opções: Criar Novo Questionário ou Visualizar Questionário.`}</p>\n    <p>{`Criar novo questionário:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`O usuário criará uma ou várias perguntas (com respostas do tipo texto ou verdadeiro/falso).`}</li>\n      <li parentName=\"ul\">{`Ao inserir as perguntas que deseja exibir, o usuário finaliza o formulário e lhe é apresentado uma senha de acesso e um QR Code.`}</li>\n    </ul>\n    <p>{`Visualizar Questionário`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Usuário insere uma senha de acesso (obtida quando finaliza a criação de um formulário) e pode visualizar todas as respostas obtidas para aquele formulário.`}</li>\n      <li parentName=\"ul\">{`Ao lado da resposta, ele visualiza o nome do usuário que fez o preenchimento e um botão para \"Enviar uma notificação\".`}</li>\n      <li parentName=\"ul\">{`Ao \"Enviar uma Notificação\", deve escrever um texto curto que será enviado ao usuário via Push Notifications.`}</li>\n      <li parentName=\"ul\">{`Ele pode clicar sobre o nome da pessoa e visualizar as respostas dela para as perguntas.`}</li>\n      <li parentName=\"ul\">{`Também deve ser possível visualizar o QR Code que está vinculado ao formulário.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"construir-o-aplicativo-do-usuário\"\n    }}>{`Construir o aplicativo do usuário`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`O usuário deve fazer login no aplicativo utilizando sua conta no Facebook ou Google.`}</li>\n      <li parentName=\"ul\">{`Ao fazer login, deve aparecer uma tela com uma lista com todos os questionários cadastrados.`}</li>\n      <li parentName=\"ul\">{`Deve haver um botão para que ele faça a leitura de um QR Code (o mesmo gerado na página do administrador) e seja encaminhado diretamente para o questionário correspondente.`}</li>\n      <li parentName=\"ul\">{`Ao efetuar a leitura do QR Code, deve montar o formulário com as questões configuradas pelo administrador.`}</li>\n      <li parentName=\"ul\">{`Ao responder o questionário, retorna para a tela de lista com os questionários.`}</li>\n      <li parentName=\"ul\">{`O usuário poderá receber Push Notifications via aplicativo com mensagens do administrador.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"requisitos\"\n    }}>{`Requisitos:`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Utilizar Angular ou React para construção da página do administrador (se você é um TOTVER e disputa uma vaga interna, a página do administrador deve ser feita em THF).`}</li>\n      <li parentName=\"ul\">{`Utilizar Node.JS ou AdvPL para o desenvolvimento do Back-End.`}</li>\n      <li parentName=\"ul\">{`Utilize ionic framework para desenvolvimento do aplicativo.`}</li>\n      <li parentName=\"ul\">{`Descreva no README o passo a passo para execução do seu projeto.`}</li>\n      <li parentName=\"ul\">{`Deixe seu repositório público para analise do Pull Request.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"ganhe-mais-pontos\"\n    }}>{`Ganhe mais pontos:`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Criação testes unitários e instrumentados.`}</li>\n      <li parentName=\"ul\">{`Garantia da segurança dos dados.`}</li>\n      <li parentName=\"ul\">{`Criação de uma estrutura de deploy da aplicação.`}</li>\n      <li parentName=\"ul\">{`Garantia a escalabilidade da aplicação (Pessoas | Infraestrutura).`}</li>\n      <li parentName=\"ul\">{`Fique à vontade para adicionar mais features no aplicativo desde que esteja dentro do contexto.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"submissão\"\n    }}>{`Submissão:`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Criar um fork deste repositório e entregar via Pull Request.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prazo-de-entrega-sugerido\"\n    }}>{`Prazo de entrega sugerido:`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`4 dias`}</li>\n    </ul>\n    <p>{`A palavra chave é: interação`}</p>\n    <p>{`Você não precisa concluir o desafio todo para criar seu Pull Request. Vá até onde conseguir da melhor forma possível, você será avaliado pelo avanço que obteve.`}</p>\n    <p>{`Descreva no seu README até que ponto do desafio você pretende realizar. Por exemplo:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Criação do aplicativo e página do administrador, mas sem opção de envio de Push Notifications.`}</li>\n      <li parentName=\"ul\">{`Criação somente do aplicativo, utilizando um QR Code ‘fake’ gerado via site: exemplo.com, com o seguinte conteúdo: etc etc etc.`}</li>\n      <li parentName=\"ul\">{`Criação somente da página, simulando as respostas via aplicativo através de uma chamada REST feita via POSTMAN com as seguintes características...`}</li>\n      <li parentName=\"ul\">{`etc.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}